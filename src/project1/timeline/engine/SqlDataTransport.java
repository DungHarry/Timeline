package project1.timeline.engine;

public class SqlDataTransport {
	//Khai b√°o h·∫±ng s·ªë ƒë∆∞·ª£c s·ª≠ d·ª•ng trong l·ªõp n√†y
	
	public static final int TYPE_IMPORT = 1;
	public static final int TYPE_EXPORT = 2;
	//Khai b√°o c√°c bi·∫øn ƒë∆∞·ª£c s·ª≠ d·ª•ng trong l·ªõp n√†y
	
	private SqlData[] dataArray = new SqlData[6];
	int type = 0;
	
	public SqlDataTransport(int type) {
		this.type = type;
		this.initialize();
	}
	//H√†m kh·ªüi t·∫°o d·ªØ li·ªáu ban ƒë·∫ßu
	
	private void initialize() {
		//Kh·ªüi t·∫°o d·ªØ li·ªáu cho m·∫£ng ch·ª©a th√¥ng tin v·ª? c√°c quan h·ªá
		
		this.dataArray[SqlProcessor.TABLE_USER] = new SqlData(SqlProcessor.TABLE_USER);
		this.dataArray[SqlProcessor.TABLE_PLACE] = new SqlData(SqlProcessor.TABLE_PLACE);
		this.dataArray[SqlProcessor.TABLE_ACTIVITY] = new SqlData(SqlProcessor.TABLE_ACTIVITY);
		this.dataArray[SqlProcessor.TABLE_TIME] = new SqlData(SqlProcessor.TABLE_TIME);
		this.dataArray[SqlProcessor.TABLE_TYPE] = new SqlData(SqlProcessor.TABLE_TYPE);
		this.dataArray[SqlProcessor.TABLE_USER_ACTIVITY] = new SqlData(SqlProcessor.TABLE_USER_ACTIVITY);
		
		//this.disableFlag();
		//Kh·ªüi t·∫°o d·ªØ li·ªáu cho m·∫£ng c√°c String ƒë·ªám trong vi·ªác chuy·ªÉn ti·∫øp d·ªØ li·ªáu gi·ªØa ng∆∞·ª?i d√πng v√† MySQL
		/*
		this.dataTransfer[SqlProcessor.TABLE_USER] = new String[SqlData.SIZE_ARRAY_USER];
		this.dataTransfer[SqlProcessor.TABLE_ACTIVITY] = new String[SqlData.SIZE_ARRAY_ACTIVITY];
		this.dataTransfer[SqlProcessor.TABLE_PLACE] = new String[SqlData.SIZE_ARRAY_PLACE];
		this.dataTransfer[SqlProcessor.TABLE_TIME] = new String[SqlData.SIZE_ARRAY_TIME];
		this.dataTransfer[SqlProcessor.TABLE_TYPE] = new String[SqlData.SIZE_ARRAY_TYPE];
		this.dataTransfer[SqlProcessor.TABLE_USER_ACTIVITY] = new String[SqlData.SIZE_ARRAY_USER_ACTIVITY];
		
		this.initializeArrayString(this.dataTransfer[SqlProcessor.TABLE_ACTIVITY], SqlData.SIZE_ARRAY_ACTIVITY, "");
		this.initializeArrayString(this.dataTransfer[SqlProcessor.TABLE_PLACE], SqlData.SIZE_ARRAY_PLACE, "");
		this.initializeArrayString(this.dataTransfer[SqlProcessor.TABLE_TIME], SqlData.SIZE_ARRAY_TIME, "");
		this.initializeArrayString(this.dataTransfer[SqlProcessor.TABLE_TYPE], SqlData.SIZE_ARRAY_TYPE, "");
		this.initializeArrayString(this.dataTransfer[SqlProcessor.TABLE_USER], SqlData.SIZE_ARRAY_USER, "");
		this.initializeArrayString(this.dataTransfer[SqlProcessor.TABLE_USER_ACTIVITY], SqlData.SIZE_ARRAY_USER_ACTIVITY, "");*/
	}
	//Ph∆∞∆°ng th·ª©c kh·ªüi t·∫°o d·ªØ li·ªáu cho m·ªôt m·∫£ng String v·ªõi s·ªë l∆∞·ª£ng ph·∫ßn t·ª≠ cho tr∆∞·ªõc
	
	private void initializeArrayString(String array[], int length, String valueBegin) {
		for(int i = 0; i < length; i ++) {
			array[i] = "";
		}
	}
	//Ph∆∞∆°ng th·ª©c thi·∫øt l·∫≠p t·∫•t c·∫£ d·ªØ li·ªáu c·ªßa m·∫£ng dataTranssfer th√†nh null
	/*
	private void emptyDataTransfer() {
		this.initializeArrayString(this.dataTransfer[SqlProcessor.TABLE_ACTIVITY], SqlData.SIZE_ARRAY_ACTIVITY, null);
		this.initializeArrayString(this.dataTransfer[SqlProcessor.TABLE_PLACE], SqlData.SIZE_ARRAY_PLACE, null);
		this.initializeArrayString(this.dataTransfer[SqlProcessor.TABLE_TIME], SqlData.SIZE_ARRAY_TIME, null);
		this.initializeArrayString(this.dataTransfer[SqlProcessor.TABLE_TYPE], SqlData.SIZE_ARRAY_TYPE, null);
		this.initializeArrayString(this.dataTransfer[SqlProcessor.TABLE_USER], SqlData.SIZE_ARRAY_USER, null);
		this.initializeArrayString(this.dataTransfer[SqlProcessor.TABLE_USER_ACTIVITY], SqlData.SIZE_ARRAY_USER_ACTIVITY, null);
	}*/
	/*Ph∆∞∆°ng th·ª©c t·∫°o ra m·ªôt c∆° b·ªô ƒë·ªám c∆° s·ªü d·ªØ li·ªáu v√† chuy·ªÉn t·∫•t c·∫£ c√°c th√¥ng tin v·ª? c∆° s·ªü d·ªØ li·ªáu ƒë√≥ v√†o trong m·∫£ng dataArray
	  ƒë·ªÉ ph·ª•c v·ª• s·∫µn s√†ng cho qu√° tr√¨nh chuy·ªÉn ƒë·ªïi sang 
	*/
	
	public boolean importDataArray(String[][] data) {
		if(data.length == this.dataArray.length) {
			for(int i = 0; i< data.length; i ++) {
				this.dataArray[i].setValueProperties(data[i]);
			}
			
			return true;
		}
		else return false;
	}
	//C√°c ph∆∞∆°ng th·ª©c getter v√† setter
	
	public SqlData[] getDataArray() {
		return this.dataArray;
	}
	//Ph∆∞∆°ng th·ª©c thi·∫øt l·∫≠p m·∫£ng dataArray trong l·ªõp n√†y b·∫±ng m·ªôt m·∫£ng kh√°c c√≥ c·∫•u tr√∫c t∆∞∆°ng ƒë∆∞∆°ng
	
	public boolean setDataArray(SqlData[] data) {
		if(this.dataArray.length == data.length) {
			this.emptyDataArray();
			
			this.dataArray = data;
			
			return true;
		}
		else return false;
	}
	//Ph∆∞∆°ng th·ª©c h·ªßy b·ª? to√†n b·ªô d·ªØ li·ªáu c√≥ trong m·∫£ng dataArray
	
	private void emptyDataArray() {
		for(int i = 0; i < this.dataArray.length; i ++) {
			this.dataArray[i] = null;
		}
	}
	/*
	public String[][] getDataTransfer() {
		return this.dataTransfer;
	}
	
	public void setDataTransfer(String[][] data) {
		this.emptyDataTransfer();
		this.dataTransfer = data;
	}*/
	/*
	//C√°c ph∆∞∆°ng th·ª©c thao t√°c v·ªõi gi√° tr·ªã c·ª? c·ªßa 
	
	public boolean[] getFlag() {
		return this.flag;
	}
	
	public void enableFlag(int typeTable) {
		if((typeTable <= 5) || (typeTable >= 0)) {
			this.flag[typeTable] = true;
		}
	}
	
	public void disableFlag() {
		for(int i = 0; i < this.flag.length; i ++) {
			this.flag[i] = false;
			this.flagBackup[i] = false;
		}
	}
	//C√°c ph∆∞∆°ng th·ª©c ki·ªÉm tra s·ª± k√≠ch ho·∫°t t·ª´ng ph·∫ßn
	/*
	private boolean checkEnableFirstPart() {
		if((dataTransfer[SqlProcessor.TABLE_PLACE][SqlData.PLACE_NAME] != null) && (dataTransfer[SqlProcessor.TABLE_PLACE][SqlData.PLACE_ADDRESS] != null)) {
			if((dataTransfer[SqlProcessor.TABLE_PLACE][SqlData.PLACE_NAME] != "") && (dataTransfer[SqlProcessor.TABLE_PLACE][SqlData.PLACE_ADDRESS] != null)) {
				this.flag[SqlProcessor.TABLE_PLACE] = true;
			}
		}
		if(dataTransfer[SqlProcessor.TABLE_TYPE][SqlData.TYPE_NAME] != null) {
			if(dataTransfer[SqlProcessor.TABLE_TYPE][SqlData.TYPE_NAME] != "") {
				this.flag[SqlProcessor.TABLE_TYPE] = true;
			}
		}
		
		
		return this.flag[SqlProcessor.TABLE_PLACE] && this.flag[SqlProcessor.TABLE_TYPE];
	}
	
	private boolean checkEnableSecondPart() {
		if(dataTransfer[SqlProcessor.TABLE_ACTIVITY][SqlData.ACTIVITY_NOTE] != null) {
			if(dataTransfer[SqlProcessor.TABLE_ACTIVITY][SqlData.ACTIVITY_NOTE] != "") {
				this.flag[SqlProcessor.TABLE_ACTIVITY] = true;
			}
		}
		
		return this.flag[SqlProcessor.TABLE_ACTIVITY];
	}
	
	private boolean checkEnableFinallyPart() {
		if(dataTransfer[SqlProcessor.TABLE_TIME][SqlData.TIME_TIME] != null) {
			if(dataTransfer[SqlProcessor.TABLE_TIME][SqlData.TIME_TIME] != "") {
				this.flag[SqlProcessor.TABLE_TIME] = true;
			}
		}
		
		return this.flag[SqlProcessor.TABLE_TIME];
	}
	
	public boolean isReadyToImport() {
		return (this.checkEnableFirstPart() && this.checkEnableSecondPart() && this.checkEnableFinallyPart());
	}
	//Ph∆∞∆°ng th·ª©c backup gi√° tr·ªã c·ªßa c·ª? ph·ª•c v·ª• cho giao di·ªán ch·ª? c·ªßa ch∆∞∆°ng tr√¨nh
	
	public boolean getWaiting() {
		return this.isWaiting;
	}
	
	public void backupFlag() {
		for(int i = 0; i < this.flag.length; i ++) {
			this.flagBackup[i] = this.flag[i];
			this.flag[i] = false;
		}
	}
	
	public void restoreFlag() {
		for(int i = 0; i < this.flag.length; i ++) {
			this.flag[i] = this.flagBackup[i];
			this.flagBackup[i] = false;
		}
	}*/
} 
